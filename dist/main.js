/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/view */ \"./src/scripts/view.js\");\n\nconsole.log(\"Webpack is working!\");\n\n// eventlistenber for click\nlet view1 = new _scripts_view__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"1800\", \"1899\");\nlet num = view1.numHighlights();\n// view1.getCountry();\n// view1.getDepartments();\n// view1.getYears();\n// console.log(num, \"num is\");\n// view1.getArtists();\n\n// Need to work on:\n// Search option, search by category\n// search by (title, artist, year,Â material, tag)\n\n// TEST CODE --------------------------------------\n// test webpack working, manipulate html element\n// document.querySelectorAll(\"ul.works > li\").forEach( element => {\n//     element.style.color = \"red\";\n// });\n\n// testing The Met API link up\n\n// GET /public/collection/v1/objects : returns a listing of all valid Object IDs available to use\n// 487401 objects\n// public/collection/v1/objects/437133 : returns a specific object at the object id (ex. 437133, \"Garden at Sainte-Adresse\" by Claude Monet) \n\n// Search by criteria\n// returns an array of object IDs that match criteria\n// could use object ID to get at fields, and then iterate through each object, collect that info from each object\n// fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?isHighlight=true&dateBegin=1800&dateEnd=1899&q=*`)\n//   .then(response => {\n//     if (response.ok) {\n//       return response.json();\n//     } else {\n//       throw new Error(response);\n//     }\n//   })\n//   .then(\n//     data => {\n//       console.log(\"Success!\");\n//       console.log(data);\n//     },\n//     errorResponse => {\n//       console.log(\"Failure!\");\n//       console.log(errorResponse);\n//     }\n//   );//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7QUFBa0M7QUFFbENDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLHFCQUFxQixDQUFDOztBQUVsQztBQUNBLElBQUlDLEtBQUssR0FBRyxJQUFJSCxxREFBSSxDQUFDLE1BQU0sRUFBQyxNQUFNLENBQUM7QUFDbkMsSUFBSUksR0FBRyxHQUFHRCxLQUFLLENBQUNFLGFBQWEsQ0FBQyxDQUFDO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBTUE7QUFDQTtBQUNBOztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2pzX3Byb2plY3QvLi9zcmMvaW5kZXguanM/YjYzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVmlldyBmcm9tIFwiLi9zY3JpcHRzL3ZpZXdcIjtcblxuY29uc29sZS5sb2coXCJXZWJwYWNrIGlzIHdvcmtpbmchXCIpXG5cbi8vIGV2ZW50bGlzdGVuYmVyIGZvciBjbGlja1xubGV0IHZpZXcxID0gbmV3IFZpZXcoXCIxODAwXCIsXCIxODk5XCIpO1xubGV0IG51bSA9IHZpZXcxLm51bUhpZ2hsaWdodHMoKTtcbi8vIHZpZXcxLmdldENvdW50cnkoKTtcbi8vIHZpZXcxLmdldERlcGFydG1lbnRzKCk7XG4vLyB2aWV3MS5nZXRZZWFycygpO1xuLy8gY29uc29sZS5sb2cobnVtLCBcIm51bSBpc1wiKTtcbi8vIHZpZXcxLmdldEFydGlzdHMoKTtcblxuXG5cblxuXG4vLyBOZWVkIHRvIHdvcmsgb246XG4vLyBTZWFyY2ggb3B0aW9uLCBzZWFyY2ggYnkgY2F0ZWdvcnlcbi8vIHNlYXJjaCBieSAodGl0bGUsIGFydGlzdCwgeWVhcizCoG1hdGVyaWFsLCB0YWcpXG5cblxuXG4vLyBURVNUIENPREUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIHRlc3Qgd2VicGFjayB3b3JraW5nLCBtYW5pcHVsYXRlIGh0bWwgZWxlbWVudFxuLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInVsLndvcmtzID4gbGlcIikuZm9yRWFjaCggZWxlbWVudCA9PiB7XG4vLyAgICAgZWxlbWVudC5zdHlsZS5jb2xvciA9IFwicmVkXCI7XG4vLyB9KTtcblxuLy8gdGVzdGluZyBUaGUgTWV0IEFQSSBsaW5rIHVwXG5cbi8vIEdFVCAvcHVibGljL2NvbGxlY3Rpb24vdjEvb2JqZWN0cyA6IHJldHVybnMgYSBsaXN0aW5nIG9mIGFsbCB2YWxpZCBPYmplY3QgSURzIGF2YWlsYWJsZSB0byB1c2Vcbi8vIDQ4NzQwMSBvYmplY3RzXG4vLyBwdWJsaWMvY29sbGVjdGlvbi92MS9vYmplY3RzLzQzNzEzMyA6IHJldHVybnMgYSBzcGVjaWZpYyBvYmplY3QgYXQgdGhlIG9iamVjdCBpZCAoZXguIDQzNzEzMywgXCJHYXJkZW4gYXQgU2FpbnRlLUFkcmVzc2VcIiBieSBDbGF1ZGUgTW9uZXQpIFxuXG4vLyBTZWFyY2ggYnkgY3JpdGVyaWFcbi8vIHJldHVybnMgYW4gYXJyYXkgb2Ygb2JqZWN0IElEcyB0aGF0IG1hdGNoIGNyaXRlcmlhXG4vLyBjb3VsZCB1c2Ugb2JqZWN0IElEIHRvIGdldCBhdCBmaWVsZHMsIGFuZCB0aGVuIGl0ZXJhdGUgdGhyb3VnaCBlYWNoIG9iamVjdCwgY29sbGVjdCB0aGF0IGluZm8gZnJvbSBlYWNoIG9iamVjdFxuLy8gZmV0Y2goYGh0dHBzOi8vY29sbGVjdGlvbmFwaS5tZXRtdXNldW0ub3JnL3B1YmxpYy9jb2xsZWN0aW9uL3YxL3NlYXJjaD9pc0hpZ2hsaWdodD10cnVlJmRhdGVCZWdpbj0xODAwJmRhdGVFbmQ9MTg5OSZxPSpgKVxuLy8gICAudGhlbihyZXNwb25zZSA9PiB7XG4vLyAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4vLyAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuLy8gICAgIH0gZWxzZSB7XG4vLyAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2UpO1xuLy8gICAgIH1cbi8vICAgfSlcbi8vICAgLnRoZW4oXG4vLyAgICAgZGF0YSA9PiB7XG4vLyAgICAgICBjb25zb2xlLmxvZyhcIlN1Y2Nlc3MhXCIpO1xuLy8gICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4vLyAgICAgfSxcbi8vICAgICBlcnJvclJlc3BvbnNlID0+IHtcbi8vICAgICAgIGNvbnNvbGUubG9nKFwiRmFpbHVyZSFcIik7XG4vLyAgICAgICBjb25zb2xlLmxvZyhlcnJvclJlc3BvbnNlKTtcbi8vICAgICB9XG4vLyAgICk7XG4iXSwibmFtZXMiOlsiVmlldyIsImNvbnNvbGUiLCJsb2ciLCJ2aWV3MSIsIm51bSIsIm51bUhpZ2hsaWdodHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/view.js":
/*!*****************************!*\
  !*** ./src/scripts/view.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nclass View {\n  // View for each time period:\n  // Show % highlights among total number of works \n  //  - pie chart for this with % highlights vs. non highlights (show specific numbers in hover description)\n\n  // Show top artists (artists with the most works)\n\n  // Show % of regions represented \n  // Show makeup of Years of Accession\n\n  constructor(dateBegin, dateEnd) {\n    this.dateBegin = dateBegin;\n    this.dateEnd = dateEnd;\n  }\n\n  // Returns the number of highlights from time period\n  numHighlights() {\n    fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?isHighlight=true&dateBegin=${this.dateBegin}&dateEnd=${this.dateEnd}&q=*`).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(response);\n      }\n    }).then(data => {\n      console.log(\"Success!\");\n      console.log(data);\n      console.log(data[\"total\"], \"num\");\n      let num = data[\"total\"];\n      return num;\n    }, errorResponse => {\n      console.log(\"Failure!\");\n      console.log(errorResponse);\n    });\n  }\n\n  // Helper Method to add each value from a field of an object to an array\n  addToArray(object, field) {\n    if (!object[field]) {\n      object[field] = 1;\n    } else {\n      object[field] += 1;\n    }\n    return object;\n  }\n\n  // Right now: gets the top 10ish artists who have works that are highlights in the collection, between the time period of the View\n  // NOTE - ON HIGHLIGHTS, since dataset is too large...\n  // Search by criteria\n  // returns an array of object IDs that match criteria, iterate through each object by id through another fetch & get at artist, collect that info into an array\n  getArtists() {\n    let artists = {};\n    let sum = 0;\n    fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?isHighlight=true&dateBegin=${this.dateBegin}&dateEnd=${this.dateEnd}&q=*`).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(response);\n      }\n    }).then(data => {\n      console.log(\"Success!\");\n      console.log(data);\n      let set = [...data[\"objectIDs\"]];\n      return set;\n    }, errorResponse => {\n      console.log(\"Failure!\");\n      console.log(errorResponse);\n    }).then(data => {\n      data.forEach((element, idx) => {\n        //if (idx < 10) {\n        fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${element}`).then(response => {\n          console.log(\"here\");\n          return response.json();\n        }).then(response => {\n          // console.log(\"here2\");\n          // console.log(response, idx);\n          // console.log(response.artistDisplayName);\n          this.addToArray(artists, response.artistDisplayName);\n          if (idx === data.length - 1) {\n            console.log(artists, \"artists\");\n            Object.values(artists).forEach(ele => {\n              sum += ele;\n            });\n            console.log(sum, \"sum\");\n            let arr = Object.entries(artists).slice();\n            arr.sort((a, b) => b[1] - a[1]);\n            console.log(arr.slice(0, 14));\n          }\n        });\n        //}\n      });\n      return artists;\n    });\n  }\n\n  // Gets top 10ish years of works acquired (among the highlights)\n  // probably makes sense to refactor to show by different year buckets, for data that makes more sense to read/see\n  getYears() {\n    let years = {};\n    let sum = 0;\n    fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?isHighlight=true&dateBegin=${this.dateBegin}&dateEnd=${this.dateEnd}&q=*`).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(response);\n      }\n    }).then(data => {\n      console.log(\"Success!\");\n      console.log(data);\n      let set = [...data[\"objectIDs\"]];\n      return set;\n    }, errorResponse => {\n      console.log(\"Failure!\");\n      console.log(errorResponse);\n    }).then(data => {\n      data.forEach((element, idx) => {\n        //if (idx < 10) {\n        fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${element}`).then(response => {\n          console.log(\"here\");\n          return response.json();\n        }).then(response => {\n          this.addToArray(years, response.accessionYear);\n          if (idx === data.length - 1) {\n            console.log(years, \"years\");\n            Object.values(years).forEach(ele => {\n              sum += ele;\n            });\n            console.log(sum, \"sum\");\n            let arr = Object.entries(years).slice();\n            arr.sort((a, b) => b[1] - a[1]);\n            console.log(arr.slice(0, 14));\n          }\n        });\n        //}\n      });\n      return years;\n    });\n  }\n\n  // Gets the top 14 countries \n  // probably makes sense to refactor to show by different year buckets, for data that makes more sense to read/see\n  getCountry() {\n    let countries = {};\n    let sum = 0;\n    fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?isHighlight=true&dateBegin=${this.dateBegin}&dateEnd=${this.dateEnd}&q=*`).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(response);\n      }\n    }).then(data => {\n      console.log(\"Success!\");\n      console.log(data);\n      let set = [...data[\"objectIDs\"]];\n      return set;\n    }, errorResponse => {\n      console.log(\"Failure!\");\n      console.log(errorResponse);\n    }).then(data => {\n      data.forEach((element, idx) => {\n        //if (idx < 10) {\n        fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${element}`).then(response => {\n          console.log(\"here\");\n          return response.json();\n        }).then(response => {\n          this.addToArray(countries, response.country);\n          if (idx === data.length - 1) {\n            console.log(countries, \"countries\");\n            Object.values(countries).forEach(ele => {\n              sum += ele;\n            });\n            console.log(sum, \"sum\");\n            let arr = Object.entries(countries).slice();\n            arr.sort((a, b) => b[1] - a[1]);\n            console.log(arr.slice(0, 14));\n          }\n        });\n        //}\n      });\n      return countries;\n    });\n  }\n\n  // Gets the 14 departments distribution (among the highlights)\n  getDepartments() {\n    let departments = {};\n    let sum = 0;\n    fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?isHighlight=true&dateBegin=${this.dateBegin}&dateEnd=${this.dateEnd}&q=*`).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(response);\n      }\n    }).then(data => {\n      console.log(\"Success!\");\n      console.log(data);\n      let set = [...data[\"objectIDs\"]];\n      return set;\n    }, errorResponse => {\n      console.log(\"Failure!\");\n      console.log(errorResponse);\n    }).then(data => {\n      data.forEach((element, idx) => {\n        //if (idx < 10) {\n        fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${element}`).then(response => {\n          console.log(\"here\");\n          return response.json();\n        }).then(response => {\n          this.addToArray(departments, response.department);\n          if (idx === data.length - 1) {\n            console.log(departments, \"departments\");\n            Object.values(departments).forEach(ele => {\n              sum += ele;\n            });\n            console.log(sum, \"sum\");\n            let arr = Object.entries(departments).slice();\n            arr.sort((a, b) => b[1] - a[1]);\n            console.log(arr.slice(0, 14));\n          }\n        });\n        //}\n      });\n      return departments;\n    });\n  }\n}\n\n// -----------------------------------------\n\n// dataset = fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?isHighlight=true&dateBegin=${dateBegin}&dateEnd=${dateEnd}&q=*`)\n//   .then(response => {\n//     if (response.ok) {\n//       return response.json();\n//     } else {\n//       throw new Error(response);\n//     }\n//   })\n//   .then(\n//     data => {\n//       console.log(\"Success!\");\n//       console.log(data);\n//     //   console.log(data[\"objectIDs\"]);\n//       set = [...data[\"objectIDs\"]];\n//       console.log(\"this is dataset\");\n//       console.log(set, \"hello\");\n//       return collectData(set);\n//     },\n//     errorResponse => {\n//       console.log(\"Failure!\");\n//       console.log(errorResponse);\n//     }\n//   );\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (View);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/view.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qc19wcm9qZWN0Ly4vc3JjL2luZGV4LnNjc3M/OTc0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;