/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/view */ \"./src/scripts/view.js\");\n\nconsole.log(\"Webpack is working!\");\n\n// eventlistener for click\nconst buttons = document.querySelector('.time-periods');\nconsole.log(buttons);\nlet timeStart;\nlet timeEnd;\nbuttons.addEventListener('click', event => {\n  console.log(event.target);\n  if (event.target.nodeName === \"LI\") {\n    console.log(event.target.innerText);\n    // console.log(event.target.getAttribute(\"data-time-start\"));\n    // console.log(event.target.getAttribute(\"data-time-end\"));\n    timeStart = event.target.getAttribute(\"data-time-start\");\n    timeEnd = event.target.getAttribute(\"data-time-end\");\n    let view1 = new _scripts_view__WEBPACK_IMPORTED_MODULE_0__[\"default\"](timeStart, timeEnd);\n    let num = view1.numHighlights();\n  }\n});\nlet view2 = new _scripts_view__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"1800\", \"1900\");\nlet num = view2.getArtists();\n// view1.getCountry();\n// view1.getDepartments();\n// view1.getYears();\n// console.log(num, \"num is\");\n// view1.getArtists();\n\n// TEST CODE --------------------------------------\n// test webpack working, manipulate html element\n// document.querySelectorAll(\"ul.works > li\").forEach( element => {\n//     element.style.color = \"red\";\n// });\n\n// testing The Met API link up\n\n// GET /public/collection/v1/objects : returns a listing of all valid Object IDs available to use\n// 487401 objects\n// public/collection/v1/objects/437133 : returns a specific object at the object id (ex. 437133, \"Garden at Sainte-Adresse\" by Claude Monet) \n\n// Search by criteria\n// returns an array of object IDs that match criteria\n// could use object ID to get at fields, and then iterate through each object, collect that info from each object\n// fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?isHighlight=true&dateBegin=1800&dateEnd=1899&q=*`)\n//   .then(response => {\n//     if (response.ok) {\n//       return response.json();\n//     } else {\n//       throw new Error(response);\n//     }\n//   })\n//   .then(\n//     data => {\n//       console.log(\"Success!\");\n//       console.log(data);\n//     },\n//     errorResponse => {\n//       console.log(\"Failure!\");\n//       console.log(errorResponse);\n//     }\n//   );\n\n// Need to work on:\n// Search option, search by category\n// search by (title, artist, year,Â material, tag)\n\n// set the dimensions and margins of the graph\nconst width = 300,\n  height = 300,\n  margin = 40;\n\n// The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\nconst radius = Math.min(width, height) / 2 - margin;\n\n// append the svg object to the div called 'my_dataviz'\nconst svg = d3.select(\"#my_dataviz\").append(\"svg\").attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// Create dummy data\nconst data = {\n  a: 9,\n  b: 20\n};\n\n// set the color scale\nconst color = d3.scaleOrdinal().range([\"#98abc5\", \"#8a89a6\"]);\n\n// Compute the position of each group on the pie:\nconst pie = d3.pie().value(function (d) {\n  return d[1];\n});\nconst data_ready = pie(Object.entries(data));\n\n// Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\nsvg.selectAll('All').data(data_ready).join('path').attr('d', d3.arc().innerRadius(0).outerRadius(radius)).attr('fill', function (d) {\n  return color(d.data[1]);\n}).attr(\"stroke\", \"black\").style(\"stroke-width\", \"1.5px\").style(\"opacity\", 0.7);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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T0FBTyxDQUFDWCxJQUFJLENBQUMsQ0FBQzs7QUFFNUM7QUFDQUwsR0FBRyxDQUNBaUIsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUNoQlosSUFBSSxDQUFDUyxVQUFVLENBQUMsQ0FDaEJJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FDWmQsSUFBSSxDQUFDLEdBQUcsRUFBRUgsRUFBRSxDQUFDa0IsR0FBRyxDQUFDLENBQUMsQ0FDaEJDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FDZEMsV0FBVyxDQUFDeEIsTUFBTSxDQUNyQixDQUFDLENBQ0FPLElBQUksQ0FBQyxNQUFNLEVBQUUsVUFBU1MsQ0FBQyxFQUFDO0VBQUUsT0FBT0wsS0FBSyxDQUFDSyxDQUFDLENBQUNSLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUFFLENBQUMsQ0FBQyxDQUNyREQsSUFBSSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FDdkJrQixLQUFLLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUM5QkEsS0FBSyxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qc19wcm9qZWN0Ly4vc3JjL2luZGV4LmpzP2I2MzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZpZXcgZnJvbSBcIi4vc2NyaXB0cy92aWV3XCI7XG5cbmNvbnNvbGUubG9nKFwiV2VicGFjayBpcyB3b3JraW5nIVwiKVxuXG4vLyBldmVudGxpc3RlbmVyIGZvciBjbGlja1xuY29uc3QgYnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50aW1lLXBlcmlvZHMnKTtcbmNvbnNvbGUubG9nKGJ1dHRvbnMpO1xubGV0IHRpbWVTdGFydDtcbmxldCB0aW1lRW5kO1xuXG5idXR0b25zLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4ge1xuICBjb25zb2xlLmxvZyhldmVudC50YXJnZXQpOyBcbiAgaWYgKGV2ZW50LnRhcmdldC5ub2RlTmFtZSA9PT0gXCJMSVwiKSB7XG4gICAgY29uc29sZS5sb2coZXZlbnQudGFyZ2V0LmlubmVyVGV4dCk7XG4gICAgLy8gY29uc29sZS5sb2coZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtdGltZS1zdGFydFwiKSk7XG4gICAgLy8gY29uc29sZS5sb2coZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtdGltZS1lbmRcIikpO1xuICAgIHRpbWVTdGFydCA9IGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRpbWUtc3RhcnRcIik7XG4gICAgdGltZUVuZCA9IGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRpbWUtZW5kXCIpO1xuXG4gICAgbGV0IHZpZXcxID0gbmV3IFZpZXcodGltZVN0YXJ0LCB0aW1lRW5kKTtcbiAgICBsZXQgbnVtID0gdmlldzEubnVtSGlnaGxpZ2h0cygpO1xuICB9IFxufSk7XG5cbmxldCB2aWV3MiA9IG5ldyBWaWV3KFwiMTgwMFwiLCBcIjE5MDBcIik7XG5sZXQgbnVtID0gdmlldzIuZ2V0QXJ0aXN0cygpO1xuLy8gdmlldzEuZ2V0Q291bnRyeSgpO1xuLy8gdmlldzEuZ2V0RGVwYXJ0bWVudHMoKTtcbi8vIHZpZXcxLmdldFllYXJzKCk7XG4vLyBjb25zb2xlLmxvZyhudW0sIFwibnVtIGlzXCIpO1xuLy8gdmlldzEuZ2V0QXJ0aXN0cygpO1xuXG5cblxuXG4vLyBURVNUIENPREUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIHRlc3Qgd2VicGFjayB3b3JraW5nLCBtYW5pcHVsYXRlIGh0bWwgZWxlbWVudFxuLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInVsLndvcmtzID4gbGlcIikuZm9yRWFjaCggZWxlbWVudCA9PiB7XG4vLyAgICAgZWxlbWVudC5zdHlsZS5jb2xvciA9IFwicmVkXCI7XG4vLyB9KTtcblxuLy8gdGVzdGluZyBUaGUgTWV0IEFQSSBsaW5rIHVwXG5cbi8vIEdFVCAvcHVibGljL2NvbGxlY3Rpb24vdjEvb2JqZWN0cyA6IHJldHVybnMgYSBsaXN0aW5nIG9mIGFsbCB2YWxpZCBPYmplY3QgSURzIGF2YWlsYWJsZSB0byB1c2Vcbi8vIDQ4NzQwMSBvYmplY3RzXG4vLyBwdWJsaWMvY29sbGVjdGlvbi92MS9vYmplY3RzLzQzNzEzMyA6IHJldHVybnMgYSBzcGVjaWZpYyBvYmplY3QgYXQgdGhlIG9iamVjdCBpZCAoZXguIDQzNzEzMywgXCJHYXJkZW4gYXQgU2FpbnRlLUFkcmVzc2VcIiBieSBDbGF1ZGUgTW9uZXQpIFxuXG4vLyBTZWFyY2ggYnkgY3JpdGVyaWFcbi8vIHJldHVybnMgYW4gYXJyYXkgb2Ygb2JqZWN0IElEcyB0aGF0IG1hdGNoIGNyaXRlcmlhXG4vLyBjb3VsZCB1c2Ugb2JqZWN0IElEIHRvIGdldCBhdCBmaWVsZHMsIGFuZCB0aGVuIGl0ZXJhdGUgdGhyb3VnaCBlYWNoIG9iamVjdCwgY29sbGVjdCB0aGF0IGluZm8gZnJvbSBlYWNoIG9iamVjdFxuLy8gZmV0Y2goYGh0dHBzOi8vY29sbGVjdGlvbmFwaS5tZXRtdXNldW0ub3JnL3B1YmxpYy9jb2xsZWN0aW9uL3YxL3NlYXJjaD9pc0hpZ2hsaWdodD10cnVlJmRhdGVCZWdpbj0xODAwJmRhdGVFbmQ9MTg5OSZxPSpgKVxuLy8gICAudGhlbihyZXNwb25zZSA9PiB7XG4vLyAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4vLyAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuLy8gICAgIH0gZWxzZSB7XG4vLyAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2UpO1xuLy8gICAgIH1cbi8vICAgfSlcbi8vICAgLnRoZW4oXG4vLyAgICAgZGF0YSA9PiB7XG4vLyAgICAgICBjb25zb2xlLmxvZyhcIlN1Y2Nlc3MhXCIpO1xuLy8gICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4vLyAgICAgfSxcbi8vICAgICBlcnJvclJlc3BvbnNlID0+IHtcbi8vICAgICAgIGNvbnNvbGUubG9nKFwiRmFpbHVyZSFcIik7XG4vLyAgICAgICBjb25zb2xlLmxvZyhlcnJvclJlc3BvbnNlKTtcbi8vICAgICB9XG4vLyAgICk7XG5cblxuLy8gTmVlZCB0byB3b3JrIG9uOlxuLy8gU2VhcmNoIG9wdGlvbiwgc2VhcmNoIGJ5IGNhdGVnb3J5XG4vLyBzZWFyY2ggYnkgKHRpdGxlLCBhcnRpc3QsIHllYXIswqBtYXRlcmlhbCwgdGFnKVxuXG4vLyBzZXQgdGhlIGRpbWVuc2lvbnMgYW5kIG1hcmdpbnMgb2YgdGhlIGdyYXBoXG5jb25zdCB3aWR0aCA9IDMwMCxcbiAgICBoZWlnaHQgPSAzMDAsXG4gICAgbWFyZ2luID0gNDA7XG5cbi8vIFRoZSByYWRpdXMgb2YgdGhlIHBpZXBsb3QgaXMgaGFsZiB0aGUgd2lkdGggb3IgaGFsZiB0aGUgaGVpZ2h0IChzbWFsbGVzdCBvbmUpLiBJIHN1YnRyYWN0IGEgYml0IG9mIG1hcmdpbi5cbmNvbnN0IHJhZGl1cyA9IE1hdGgubWluKHdpZHRoLCBoZWlnaHQpIC8gMiAtIG1hcmdpbjtcblxuLy8gYXBwZW5kIHRoZSBzdmcgb2JqZWN0IHRvIHRoZSBkaXYgY2FsbGVkICdteV9kYXRhdml6J1xuY29uc3Qgc3ZnID0gZDMuc2VsZWN0KFwiI215X2RhdGF2aXpcIilcbiAgLmFwcGVuZChcInN2Z1wiKVxuICAgIC5hdHRyKFwid2lkdGhcIiwgd2lkdGgpXG4gICAgLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0KVxuICAuYXBwZW5kKFwiZ1wiKVxuICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHt3aWR0aC8yfSwgJHtoZWlnaHQvMn0pYCk7XG5cbi8vIENyZWF0ZSBkdW1teSBkYXRhXG5jb25zdCBkYXRhID0ge2E6IDksIGI6IDIwfVxuXG4vLyBzZXQgdGhlIGNvbG9yIHNjYWxlXG5jb25zdCBjb2xvciA9IGQzLnNjYWxlT3JkaW5hbCgpXG4gIC5yYW5nZShbXCIjOThhYmM1XCIsIFwiIzhhODlhNlwiXSlcblxuLy8gQ29tcHV0ZSB0aGUgcG9zaXRpb24gb2YgZWFjaCBncm91cCBvbiB0aGUgcGllOlxuY29uc3QgcGllID0gZDMucGllKClcbiAgLnZhbHVlKGZ1bmN0aW9uKGQpIHtyZXR1cm4gZFsxXX0pXG5jb25zdCBkYXRhX3JlYWR5ID0gcGllKE9iamVjdC5lbnRyaWVzKGRhdGEpKVxuXG4vLyBCdWlsZCB0aGUgcGllIGNoYXJ0OiBCYXNpY2FsbHksIGVhY2ggcGFydCBvZiB0aGUgcGllIGlzIGEgcGF0aCB0aGF0IHdlIGJ1aWxkIHVzaW5nIHRoZSBhcmMgZnVuY3Rpb24uXG5zdmdcbiAgLnNlbGVjdEFsbCgnQWxsJylcbiAgLmRhdGEoZGF0YV9yZWFkeSlcbiAgLmpvaW4oJ3BhdGgnKVxuICAuYXR0cignZCcsIGQzLmFyYygpXG4gICAgLmlubmVyUmFkaXVzKDApXG4gICAgLm91dGVyUmFkaXVzKHJhZGl1cylcbiAgKVxuICAuYXR0cignZmlsbCcsIGZ1bmN0aW9uKGQpeyByZXR1cm4oY29sb3IoZC5kYXRhWzFdKSkgfSlcbiAgLmF0dHIoXCJzdHJva2VcIiwgXCJibGFja1wiKVxuICAuc3R5bGUoXCJzdHJva2Utd2lkdGhcIiwgXCIxLjVweFwiKVxuICAuc3R5bGUoXCJvcGFjaXR5XCIsIDAuNylcbiJdLCJuYW1lcyI6WyJWaWV3IiwiY29uc29sZSIsImxvZyIsImJ1dHRvbnMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ0aW1lU3RhcnQiLCJ0aW1lRW5kIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwidGFyZ2V0Iiwibm9kZU5hbWUiLCJpbm5lclRleHQiLCJnZXRBdHRyaWJ1dGUiLCJ2aWV3MSIsIm51bSIsIm51bUhpZ2hsaWdodHMiLCJ2aWV3MiIsImdldEFydGlzdHMiLCJ3aWR0aCIsImhlaWdodCIsIm1hcmdpbiIsInJhZGl1cyIsIk1hdGgiLCJtaW4iLCJzdmciLCJkMyIsInNlbGVjdCIsImFwcGVuZCIsImF0dHIiLCJkYXRhIiwiYSIsImIiLCJjb2xvciIsInNjYWxlT3JkaW5hbCIsInJhbmdlIiwicGllIiwidmFsdWUiLCJkIiwiZGF0YV9yZWFkeSIsIk9iamVjdCIsImVudHJpZXMiLCJzZWxlY3RBbGwiLCJqb2luIiwiYXJjIiwiaW5uZXJSYWRpdXMiLCJvdXRlclJhZGl1cyIsInN0eWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/view.js":
/*!*****************************!*\
  !*** ./src/scripts/view.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nclass View {\n  // View for each time period:\n  // Show % highlights among total number of works \n  //  - pie chart for this with % highlights vs. non highlights (show specific numbers in hover description)\n\n  // Show top artists (artists with the most works)\n\n  // Show % of regions represented \n  // Show makeup of Years of Accession\n\n  // eventlistener for click\n\n  constructor(dateBegin, dateEnd) {\n    this.dateBegin = dateBegin;\n    this.dateEnd = dateEnd;\n  }\n\n  // setup() {\n  //     const buttons = document.querySelector('.time-periods');\n  //     console.log(buttons);\n  //     let timeStart;\n  //     let timeEnd;\n\n  //     buttons.addEventListener('click', event => {\n  //         console.log(event.target); \n  //         if (event.target.nodeName === \"LI\") {\n  //             console.log(event.target.innerText);\n  //             // console.log(event.target.getAttribute(\"data-time-start\"));\n  //             // console.log(event.target.getAttribute(\"data-time-end\"));\n  //             timeStart = event.target.getAttribute(\"data-time-start\");\n  //             timeEnd = event.target.getAttribute(\"data-time-end\");\n  //         }; \n  //     });\n  //     this.dateBegin = timeStart;\n  //     this.dateEnd = timeEnd;\n  // }\n\n  // Returns the number of highlights from time period\n  numHighlights() {\n    fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?isHighlight=true&dateBegin=${this.dateBegin}&dateEnd=${this.dateEnd}&q=*`).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(response);\n      }\n    }).then(data => {\n      console.log(\"Success!\");\n      console.log(data);\n      console.log(data[\"total\"], \"num\");\n      let num = data[\"total\"];\n      return num;\n    }, errorResponse => {\n      console.log(\"Failure!\");\n      console.log(errorResponse);\n    });\n  }\n\n  // Helper Method to add each value from a field of an object to an array\n  addToArray(object, field) {\n    if (!object[field]) {\n      object[field] = 1;\n    } else {\n      object[field] += 1;\n    }\n    return object;\n  }\n\n  // Right now: gets the top 10ish artists who have works that are highlights in the collection, between the time period of the View\n  // NOTE - ON HIGHLIGHTS, since dataset is too large...\n  // Search by criteria\n  // returns an array of object IDs that match criteria, iterate through each object by id through another fetch & get at artist, collect that info into an array\n  getArtists() {\n    let artists = {};\n    let sum = 0;\n    fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?isHighlight=true&dateBegin=${this.dateBegin}&dateEnd=${this.dateEnd}&q=*`).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(response);\n      }\n    }).then(data => {\n      console.log(\"Success!\");\n      console.log(data);\n      let set = [...data[\"objectIDs\"]];\n      return set;\n    }, errorResponse => {\n      console.log(\"Failure!\");\n      console.log(errorResponse);\n    }).then(data => {\n      data.forEach((element, idx) => {\n        //if (idx < 10) {\n        fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${element}`).then(response => {\n          console.log(\"here\");\n          return response.json();\n        }).then(response => {\n          // console.log(\"here2\");\n          // console.log(response, idx);\n          // console.log(response.artistDisplayName);\n          this.addToArray(artists, response.artistDisplayName);\n          if (idx === data.length - 1) {\n            console.log(artists, \"artists\");\n            Object.values(artists).forEach(ele => {\n              sum += ele;\n            });\n            console.log(sum, \"sum\");\n            let arr = Object.entries(artists).slice();\n            arr.sort((a, b) => b[1] - a[1]);\n            console.log(arr.slice(0, 14));\n          }\n        });\n        //}\n      });\n      return artists;\n    });\n  }\n\n  // Gets top 10ish years of works acquired (among the highlights)\n  // probably makes sense to refactor to show by different year buckets, for data that makes more sense to read/see\n  getYears() {\n    let years = {};\n    let sum = 0;\n    fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?isHighlight=true&dateBegin=${this.dateBegin}&dateEnd=${this.dateEnd}&q=*`).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(response);\n      }\n    }).then(data => {\n      console.log(\"Success!\");\n      console.log(data);\n      let set = [...data[\"objectIDs\"]];\n      return set;\n    }, errorResponse => {\n      console.log(\"Failure!\");\n      console.log(errorResponse);\n    }).then(data => {\n      data.forEach((element, idx) => {\n        //if (idx < 10) {\n        fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${element}`).then(response => {\n          console.log(\"here\");\n          return response.json();\n        }).then(response => {\n          this.addToArray(years, response.accessionYear);\n          if (idx === data.length - 1) {\n            console.log(years, \"years\");\n            Object.values(years).forEach(ele => {\n              sum += ele;\n            });\n            console.log(sum, \"sum\");\n            let arr = Object.entries(years).slice();\n            arr.sort((a, b) => b[1] - a[1]);\n            console.log(arr.slice(0, 14));\n          }\n        });\n        //}\n      });\n      return years;\n    });\n  }\n\n  // Gets the top 14 countries \n  // probably makes sense to refactor to show by different year buckets, for data that makes more sense to read/see\n  getCountry() {\n    let countries = {};\n    let sum = 0;\n    fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?isHighlight=true&dateBegin=${this.dateBegin}&dateEnd=${this.dateEnd}&q=*`).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(response);\n      }\n    }).then(data => {\n      console.log(\"Success!\");\n      console.log(data);\n      let set = [...data[\"objectIDs\"]];\n      return set;\n    }, errorResponse => {\n      console.log(\"Failure!\");\n      console.log(errorResponse);\n    }).then(data => {\n      data.forEach((element, idx) => {\n        //if (idx < 10) {\n        fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${element}`).then(response => {\n          console.log(\"here\");\n          return response.json();\n        }).then(response => {\n          this.addToArray(countries, response.country);\n          if (idx === data.length - 1) {\n            console.log(countries, \"countries\");\n            Object.values(countries).forEach(ele => {\n              sum += ele;\n            });\n            console.log(sum, \"sum\");\n            let arr = Object.entries(countries).slice();\n            arr.sort((a, b) => b[1] - a[1]);\n            console.log(arr.slice(0, 14));\n          }\n        });\n        //}\n      });\n      return countries;\n    });\n  }\n\n  // Gets the 14 departments distribution (among the highlights)\n  getDepartments() {\n    let departments = {};\n    let sum = 0;\n    fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?isHighlight=true&dateBegin=${this.dateBegin}&dateEnd=${this.dateEnd}&q=*`).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(response);\n      }\n    }).then(data => {\n      console.log(\"Success!\");\n      console.log(data);\n      let set = [...data[\"objectIDs\"]];\n      return set;\n    }, errorResponse => {\n      console.log(\"Failure!\");\n      console.log(errorResponse);\n    }).then(data => {\n      data.forEach((element, idx) => {\n        //if (idx < 10) {\n        fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${element}`).then(response => {\n          console.log(\"here\");\n          return response.json();\n        }).then(response => {\n          this.addToArray(departments, response.department);\n          if (idx === data.length - 1) {\n            console.log(departments, \"departments\");\n            Object.values(departments).forEach(ele => {\n              sum += ele;\n            });\n            console.log(sum, \"sum\");\n            let arr = Object.entries(departments).slice();\n            arr.sort((a, b) => b[1] - a[1]);\n            console.log(arr.slice(0, 14));\n          }\n        });\n        //}\n      });\n      return departments;\n    });\n  }\n}\n\n// -----------------------------------------\n\n// dataset = fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?isHighlight=true&dateBegin=${dateBegin}&dateEnd=${dateEnd}&q=*`)\n//   .then(response => {\n//     if (response.ok) {\n//       return response.json();\n//     } else {\n//       throw new Error(response);\n//     }\n//   })\n//   .then(\n//     data => {\n//       console.log(\"Success!\");\n//       console.log(data);\n//     //   console.log(data[\"objectIDs\"]);\n//       set = [...data[\"objectIDs\"]];\n//       console.log(\"this is dataset\");\n//       console.log(set, \"hello\");\n//       return collectData(set);\n//     },\n//     errorResponse => {\n//       console.log(\"Failure!\");\n//       console.log(errorResponse);\n//     }\n//   );\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (View);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/view.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qc19wcm9qZWN0Ly4vc3JjL2luZGV4LnNjc3M/OTc0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;