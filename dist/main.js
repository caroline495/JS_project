/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/view */ \"./src/scripts/view.js\");\n\n\n// console.log(\"Webpack is working!\")\n\n// Code for dialog\nconst dialog = document.querySelector(\"dialog\");\nconst closeButton = document.querySelector(\"dialog button\");\n\n// \"Close\" button closes the dialog\ncloseButton.addEventListener(\"click\", () => {\n  let instructions = document.querySelector(\"#instructions\");\n  instructions.innerText = \"Click on any time period to see this period of art history at the Met\";\n  dialog.close();\n});\n\n// eventlistener for click on Time Period buttons\nconst buttons = document.querySelector('.time-periods');\nlet timeStart;\nlet timeEnd;\nbuttons.addEventListener('click', event => {\n  // console.log(event.target); \n  if (event.target.nodeName === \"LI\") {\n    // console.log(event.target.innerText, \"innertext\");\n    timeStart = event.target.getAttribute(\"data-time-start\");\n    timeEnd = event.target.getAttribute(\"data-time-end\");\n    let backgroundImage = document.querySelector(\"#met-background\");\n    if (backgroundImage) {\n      document.body.removeChild(backgroundImage);\n    }\n    let piechart = document.querySelector(\"#piechart_viz\");\n    let horizBarChart = document.querySelector(\"#example-chart\");\n    if (piechart.hasChildNodes() || horizBarChart.hasChildNodes()) {\n      while (piechart.hasChildNodes() || horizBarChart.hasChildNodes()) {\n        piechart.removeChild(piechart.firstChild);\n        horizBarChart.removeChild(horizBarChart.firstChild);\n      }\n    }\n    new _scripts_view__WEBPACK_IMPORTED_MODULE_0__[\"default\"](timeStart, timeEnd);\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7QUFBa0M7O0FBRWxDOztBQUVBO0FBQ0EsTUFBTUMsTUFBTSxHQUFHQyxRQUFRLENBQUNDLGFBQWEsQ0FBQyxRQUFRLENBQUM7QUFDL0MsTUFBTUMsV0FBVyxHQUFHRixRQUFRLENBQUNDLGFBQWEsQ0FBQyxlQUFlLENBQUM7O0FBRTNEO0FBQ0FDLFdBQVcsQ0FBQ0MsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLE1BQU07RUFDMUMsSUFBSUMsWUFBWSxHQUFHSixRQUFRLENBQUNDLGFBQWEsQ0FBQyxlQUFlLENBQUM7RUFDMURHLFlBQVksQ0FBQ0MsU0FBUyxHQUFHLHVFQUF1RTtFQUNoR04sTUFBTSxDQUFDTyxLQUFLLENBQUMsQ0FBQztBQUNoQixDQUFDLENBQUM7O0FBRUY7QUFDQSxNQUFNQyxPQUFPLEdBQUdQLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLGVBQWUsQ0FBQztBQUV2RCxJQUFJTyxTQUFTO0FBQ2IsSUFBSUMsT0FBTztBQUVYRixPQUFPLENBQUNKLGdCQUFnQixDQUFDLE9BQU8sRUFBRU8sS0FBSyxJQUFJO0VBQ3pDO0VBQ0EsSUFBSUEsS0FBSyxDQUFDQyxNQUFNLENBQUNDLFFBQVEsS0FBSyxJQUFJLEVBQUU7SUFDbEM7SUFDQUosU0FBUyxHQUFHRSxLQUFLLENBQUNDLE1BQU0sQ0FBQ0UsWUFBWSxDQUFDLGlCQUFpQixDQUFDO0lBQ3hESixPQUFPLEdBQUdDLEtBQUssQ0FBQ0MsTUFBTSxDQUFDRSxZQUFZLENBQUMsZUFBZSxDQUFDO0lBRXBELElBQUlDLGVBQWUsR0FBR2QsUUFBUSxDQUFDQyxhQUFhLENBQUMsaUJBQWlCLENBQUM7SUFDL0QsSUFBSWEsZUFBZSxFQUFFO01BQ25CZCxRQUFRLENBQUNlLElBQUksQ0FBQ0MsV0FBVyxDQUFDRixlQUFlLENBQUM7SUFDNUM7SUFFQSxJQUFJRyxRQUFRLEdBQUdqQixRQUFRLENBQUNDLGFBQWEsQ0FBQyxlQUFlLENBQUM7SUFDdEQsSUFBSWlCLGFBQWEsR0FBR2xCLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLGdCQUFnQixDQUFDO0lBQzVELElBQUlnQixRQUFRLENBQUNFLGFBQWEsQ0FBQyxDQUFDLElBQUlELGFBQWEsQ0FBQ0MsYUFBYSxDQUFDLENBQUMsRUFBQztNQUMxRCxPQUFPRixRQUFRLENBQUNFLGFBQWEsQ0FBQyxDQUFDLElBQUlELGFBQWEsQ0FBQ0MsYUFBYSxDQUFDLENBQUMsRUFBQztRQUMvREYsUUFBUSxDQUFDRCxXQUFXLENBQUNDLFFBQVEsQ0FBQ0csVUFBVSxDQUFDO1FBQ3pDRixhQUFhLENBQUNGLFdBQVcsQ0FBQ0UsYUFBYSxDQUFDRSxVQUFVLENBQUM7TUFDckQ7SUFDSjtJQUVBLElBQUl0QixxREFBSSxDQUFDVSxTQUFTLEVBQUVDLE9BQU8sQ0FBQztFQUU5QjtBQUNGLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2pzX3Byb2plY3QvLi9zcmMvaW5kZXguanM/YjYzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVmlldyBmcm9tIFwiLi9zY3JpcHRzL3ZpZXdcIjtcblxuLy8gY29uc29sZS5sb2coXCJXZWJwYWNrIGlzIHdvcmtpbmchXCIpXG5cbi8vIENvZGUgZm9yIGRpYWxvZ1xuY29uc3QgZGlhbG9nID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImRpYWxvZ1wiKTtcbmNvbnN0IGNsb3NlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImRpYWxvZyBidXR0b25cIik7XG5cbi8vIFwiQ2xvc2VcIiBidXR0b24gY2xvc2VzIHRoZSBkaWFsb2dcbmNsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gIGxldCBpbnN0cnVjdGlvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2luc3RydWN0aW9uc1wiKTtcbiAgaW5zdHJ1Y3Rpb25zLmlubmVyVGV4dCA9IFwiQ2xpY2sgb24gYW55IHRpbWUgcGVyaW9kIHRvIHNlZSB0aGlzIHBlcmlvZCBvZiBhcnQgaGlzdG9yeSBhdCB0aGUgTWV0XCI7ICBcbiAgZGlhbG9nLmNsb3NlKCk7XG59KTtcblxuLy8gZXZlbnRsaXN0ZW5lciBmb3IgY2xpY2sgb24gVGltZSBQZXJpb2QgYnV0dG9uc1xuY29uc3QgYnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50aW1lLXBlcmlvZHMnKTtcblxubGV0IHRpbWVTdGFydDtcbmxldCB0aW1lRW5kO1xuXG5idXR0b25zLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4ge1xuICAvLyBjb25zb2xlLmxvZyhldmVudC50YXJnZXQpOyBcbiAgaWYgKGV2ZW50LnRhcmdldC5ub2RlTmFtZSA9PT0gXCJMSVwiKSB7XG4gICAgLy8gY29uc29sZS5sb2coZXZlbnQudGFyZ2V0LmlubmVyVGV4dCwgXCJpbm5lcnRleHRcIik7XG4gICAgdGltZVN0YXJ0ID0gZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtdGltZS1zdGFydFwiKTtcbiAgICB0aW1lRW5kID0gZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtdGltZS1lbmRcIik7XG5cbiAgICBsZXQgYmFja2dyb3VuZEltYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNtZXQtYmFja2dyb3VuZFwiKTtcbiAgICBpZiAoYmFja2dyb3VuZEltYWdlKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGJhY2tncm91bmRJbWFnZSk7XG4gICAgfVxuXG4gICAgbGV0IHBpZWNoYXJ0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwaWVjaGFydF92aXpcIik7XG4gICAgbGV0IGhvcml6QmFyQ2hhcnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2V4YW1wbGUtY2hhcnRcIik7XG4gICAgaWYgKHBpZWNoYXJ0Lmhhc0NoaWxkTm9kZXMoKSB8fCBob3JpekJhckNoYXJ0Lmhhc0NoaWxkTm9kZXMoKSl7XG4gICAgICAgIHdoaWxlIChwaWVjaGFydC5oYXNDaGlsZE5vZGVzKCkgfHwgaG9yaXpCYXJDaGFydC5oYXNDaGlsZE5vZGVzKCkpe1xuICAgICAgICAgIHBpZWNoYXJ0LnJlbW92ZUNoaWxkKHBpZWNoYXJ0LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgIGhvcml6QmFyQ2hhcnQucmVtb3ZlQ2hpbGQoaG9yaXpCYXJDaGFydC5maXJzdENoaWxkKTsgICBcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBuZXcgVmlldyh0aW1lU3RhcnQsIHRpbWVFbmQpO1xuXG4gIH0gXG59KTtcbiJdLCJuYW1lcyI6WyJWaWV3IiwiZGlhbG9nIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY2xvc2VCdXR0b24iLCJhZGRFdmVudExpc3RlbmVyIiwiaW5zdHJ1Y3Rpb25zIiwiaW5uZXJUZXh0IiwiY2xvc2UiLCJidXR0b25zIiwidGltZVN0YXJ0IiwidGltZUVuZCIsImV2ZW50IiwidGFyZ2V0Iiwibm9kZU5hbWUiLCJnZXRBdHRyaWJ1dGUiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJib2R5IiwicmVtb3ZlQ2hpbGQiLCJwaWVjaGFydCIsImhvcml6QmFyQ2hhcnQiLCJoYXNDaGlsZE5vZGVzIiwiZmlyc3RDaGlsZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/horizBarChartVisual.js":
/*!********************************************!*\
  !*** ./src/scripts/horizBarChartVisual.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHorizBarChart: function() { return /* binding */ createHorizBarChart; }\n/* harmony export */ });\nfunction createHorizBarChart(fileName) {\n  // Set up the dimensions of the chart\n  const margin = {\n    top: 0,\n    right: 100,\n    bottom: 50,\n    left: 200\n  };\n  const width = 550 - margin.left - margin.right;\n  const height = 275 - margin.top - margin.bottom;\n\n  // Create the SVG container for the chart\n  const svg = d3.select(\"#example-chart\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\") // g is group element\n  .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n  //const data;\n  // Load and process the data\n  d3.csv(`${fileName}.csv`).then(data => {\n    data.forEach(d => {\n      d.total = +d.total; // taking every total value and make it a number\n    });\n    // console.log(data[0], 'data is');\n    // Sort the data by total\n    data.sort(function (a, b) {\n      return d3.ascending(a.total, b.total);\n    });\n\n    // div that appends to the body, but isn't visible\n    var divTip = d3.select(\"#horiz-chart-group\").append(\"div\").attr(\"class\", \"tooltip\").style(\"opacity\", 0);\n\n    // sample data\n    // const data = [{\"\":\"1\", type: \"a\", total:\"10\"},\n    //               {\"\":\"2\", type: \"b\", total:\"15\"},\n    //               {\"\":\"3\", type: \"c\", total:\"20\"},\n    //               {\"\":\"4\", type: \"d\", total:\"6\"},\n    //               {\"\":\"5\", type: \"e\", total:\"13\"},\n    //               {\"\":\"6\", type: \"f\", total:\"70\"},\n    //               {\"\":\"7\", type: \"g\", total:\"5\"}\n    //               ]\n\n    // Sort the data by total\n    // data.sort(function (a, b) {\n    //   return d3.ascending(a.total, b.total);\n    // });\n\n    // Set the x and y scales\n    const x = d3.scaleLinear().range([0, width]) // range of pixels where chart will live\n    .domain([0, d3.max(data, function (d) {\n      return d.total;\n    })]); // set of numbers will be from 0 to the biggest # in our dataset will look at all our totals and return the max\n\n    const y = d3.scaleBand() // use this with horiz bar chart\n    .range([height, 0]).padding(0.1).domain(data.map(function (d) {\n      return d.artist;\n    })); // domain is all the y-values\n\n    // Create the x and y axes\n    const xAxis = d3.axisBottom(x).ticks(5).tickSize(0); // remove ticks\n\n    const yAxis = d3.axisLeft(y).tickSize(0).tickPadding(10);\n\n    // Add vertical gridlines\n    svg.selectAll(\"line.vertical-grid\").data(x.ticks(5)).enter().append(\"line\").attr(\"class\", \"vertical-grid\").attr(\"x1\", function (d) {\n      return x(d);\n    }).attr(\"y1\", 0).attr(\"x2\", function (d) {\n      return x(d);\n    }).attr(\"y2\", height).style(\"stroke\", \"gray\").style(\"stroke-width\", 0.5).style(\"stroke-dasharray\", \"3 3\");\n\n    // Create the bars for the chart\n    svg.selectAll(\".bar\").data(data).enter().append(\"rect\").attr(\"class\", \"bar\").attr(\"id\", function (d) {\n      return d.total.toString();\n    }).attr(\"y\", function (d) {\n      return y(d.artist);\n    }).attr(\"height\", y.bandwidth()).attr(\"x\", 0).attr(\"width\", function (d) {\n      return x(d.total);\n    }).attr('fill', '#BF2720');\n\n    // Add the x and y axes to the chart\n    svg.append(\"g\").attr(\"class\", \"x axis\").style(\"font-size\", \"11px\").attr(\"transform\", \"translate(0,\" + height + \")\") // this moves it from the top of the chart to the bottom\n    .call(xAxis).call(g => g.select(\".domain\").remove());\n    svg.append(\"g\").attr(\"class\", \"y axis\").style(\"font-size\", \"8px\").call(yAxis).selectAll('path').style('stroke-width', '1.75px');\n    svg.selectAll(\".y.axis .tick text\").text(function (d) {\n      console.log;\n      return d.toUpperCase();\n    });\n    svg.on(\"mouseover\", evt => {\n      // console.log(evt, \"evt\");  \n      // console.log(evt.target, \"evt.target\");\n      // console.log(evt.target.nodeName, \"evt.target nodeName\");\n      if (evt.target.nodeName === \"rect\") {\n        d3.select(evt.target).transition().duration('50').attr('opacity', '.8');\n\n        //Makes the new div appear on hover:\n        divTip.transition().duration(50).style(\"opacity\", 1);\n        let num = `${evt.target.id} works`; // label for hover\n        divTip.html(num).style(\"left\", evt.pageX - 25 + \"px\").style(\"top\", evt.pageY - 10 + \"px\");\n      }\n    }).on('mouseout', function (evt, d) {\n      if (evt.target.nodeName === \"rect\") {\n        d3.select(evt.target).transition().duration('50').attr('opacity', '1');\n\n        //Makes the new divTip disappear:\n        divTip.transition().duration('50').style(\"opacity\", 0);\n      }\n    });\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/horizBarChartVisual.js\n");

/***/ }),

/***/ "./src/scripts/pieDataVisual.js":
/*!**************************************!*\
  !*** ./src/scripts/pieDataVisual.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPieChart: function() { return /* binding */ createPieChart; }\n/* harmony export */ });\n// PIE CHART CODE \n\nfunction createPieChart(numHighlights, numNotHighlights) {\n  let piechart = document.querySelector(\"piechart_viz\");\n  if (piechart && piechart.hasChildNodes()) {\n    piechart.removeChild();\n    console.log(\"hello\");\n  }\n\n  // Create dummy data\n  let data = [{\n    title: \"Highlight\",\n    value: numHighlights,\n    percentageShare: 0\n  }, {\n    title: \"Not Highlight\",\n    value: numNotHighlights,\n    percentageShare: 0\n  }];\n  let avg1 = data[0].value * 1.0 / (data[0].value + data[1].value) * 100;\n  let avg2 = data[1].value * 1.0 / (data[0].value + data[1].value) * 100;\n  data[0].percentageShare = Math.round(avg1);\n  data[1].percentageShare = Math.round(avg2);\n\n  // set the dimensions and margins of the graph\n  const width = 250,\n    height = 250,\n    margin = 0;\n\n  // The radius of the pieplot is half the width or half the height (smallest one). subtract a bit of margin.\n  const radius = Math.min(width, height) / 2 - margin;\n\n  // append the svg object to the div called 'piechart_viz'\n  const svg = d3.select(\"#piechart_viz\").append(\"svg\").attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n  // set the color scale\n  const color = d3.scaleOrdinal().range([\"#BF2720\", \"#BFBFBF\"]);\n\n  // Compute the position of each group on the pie:\n  const pie = d3.pie().value(function (d) {\n    // console.log(d, \"d here\");  // d is: {title: 'Highlight', value: 333}\n    return d.value;\n  })(data);\n  // d is an array of the data values [[a, .33],[b, .67]]\n\n  //  const data_set = pie(Object.entries(data))\n\n  // div that appends to the body, but isn't visible\n  const divTip = d3.select(\"#pie-chart-group\").append(\"div\").attr(\"class\", \"tooltip\").style(\"opacity\", 0);\n\n  // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n  const path = svg.selectAll('path').data(pie).enter().append('path').attr('d', d3.arc().innerRadius(0).outerRadius(radius)).attr('fill', function (d) {\n    return color(d.data.title);\n  }).attr(\"stroke\", \"white\").style(\"stroke-width\", \"1px\").attr(\"class\", \"pie-chart\").on(\"mouseover\", (evt, d) => {\n    d3.select(evt.target).transition().duration('50').attr('opacity', '.85');\n\n    //Makes the new div appear on hover:\n    divTip.transition().duration(50).style(\"opacity\", 1);\n    // Highlight: XX works\n    // let num = `${d.data.title}s: ${(d.value).toString()} works, ${(d.data.percentageShare).toString()}%`;\n    let num = `${d.data.title}s: ${d.value.toString()} works`;\n    divTip.html(num).style(\"left\", evt.pageX - 25 + \"px\").style(\"top\", evt.pageY - 10 + \"px\");\n  }).on('mouseout', function (evt, d) {\n    d3.select(evt.target).transition().duration('50').attr('opacity', '1');\n\n    //Makes the new divTip disappear:\n    divTip.transition().duration('50').style(\"opacity\", 0);\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/pieDataVisual.js\n");

/***/ }),

/***/ "./src/scripts/view.js":
/*!*****************************!*\
  !*** ./src/scripts/view.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _pieDataVisual__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pieDataVisual */ \"./src/scripts/pieDataVisual.js\");\n/* harmony import */ var _horizBarChartVisual__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./horizBarChartVisual */ \"./src/scripts/horizBarChartVisual.js\");\n\n\nclass View {\n  constructor(dateBegin, dateEnd) {\n    this.dateBegin = dateBegin;\n    this.dateEnd = dateEnd;\n    this.setup();\n  }\n  getArtistChart() {\n    const fileNameKey = {\n      \"999\": \"beforeAD_1000_top_artists\",\n      \"1399\": \"1000_1399AD_top_artists\",\n      \"1599\": \"1400_1599AD_top_artists\",\n      \"1799\": \"1600_1799AD_top_artists\",\n      \"1899\": \"1800_1899AD_top_artists\",\n      \"2024\": \"1900_2024AD_top_artists\"\n    };\n    (0,_horizBarChartVisual__WEBPACK_IMPORTED_MODULE_1__.createHorizBarChart)(fileNameKey[this.dateEnd]);\n  }\n  setup() {\n    // 1) populate pie chart for time period\n    // - call numHighlights / total works in that time period \n    //      - populate pie chart with (numHighlights, numNotHighlights)\n    this.numHighlights();\n    // 2) populate horiz bar chart with appropriate fileName for top artists\n    this.getArtistChart();\n    this.displaySelectedWork();\n  }\n  numHighlights() {\n    const shareHighlightsKey = {\n      \"999\": {\n        highlight: 442,\n        notHighlight: 84309\n      },\n      \"1399\": {\n        highlight: 192,\n        notHighlight: 11088\n      },\n      \"1599\": {\n        highlight: 260,\n        notHighlight: 29854\n      },\n      \"1799\": {\n        highlight: 446,\n        notHighlight: 87929\n      },\n      \"1899\": {\n        highlight: 549,\n        notHighlight: 130483\n      },\n      \"2024\": {\n        highlight: 888,\n        notHighlight: 138516\n      }\n    };\n    (0,_pieDataVisual__WEBPACK_IMPORTED_MODULE_0__.createPieChart)(shareHighlightsKey[this.dateEnd].highlight, shareHighlightsKey[this.dateEnd].notHighlight);\n\n    // fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?isHighlight=true&dateBegin=${this.dateBegin}&dateEnd=${this.dateEnd}&q=*`)\n    // .then(response => {\n    // if (response.ok) {\n    //     return response.json();\n    // } else {\n    //     throw new Error(response);\n    // }\n    // })\n    // .then(\n    //   data => {\n    //     console.log(\"Success!\");\n    //     console.log(data);\n    //     console.log(data[\"total\"], \"num\");\n    //     let num = data[\"total\"];\n\n    //     return num;\n    // },\n    // errorResponse => {\n    //     console.log(\"Failure!\");\n    //     console.log(errorResponse);\n    // })\n    // .then( \n    //   num => {\n\n    //     fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?dateBegin=${this.dateBegin}&dateEnd=${this.dateEnd}&q=*`)\n    //     .then(response => {\n    //         console.log(\"here\");\n    //         return response.json()\n    //     })\n    //     .then(response => {\n    //        console.log(response.total,\"total\");\n    //         console.log(num, \"num\");\n    //         return [num, response.total]\n    //     })\n    //     .then((res) => {\n    //         createPieChart(res[0], res[1]);\n    //     });\n    //   }\n\n    // )\n  }\n  displaySelectedWork() {\n    const SelectedWorkKey = {\n      \"999\": {\n        title: \"The Temple of Dendur\",\n        url: \"https://collectionapi.metmuseum.org/api/collection/v1/iiif/547802/1223802/main-image\",\n        artist: \"Unknown\",\n        date: \"completed by 10 B.C., Egypt\",\n        medium: \"Aeolian sandstone\",\n        location: \"On view at The Met Fifth Avenue in Gallery 131\",\n        descriptionText: \"Egyptian temples were not simply houses for a cult image but also represented, in their design and decoration, a variety of religious and mythological concepts. One important symbolic aspect was based on the understanding of the temple as an image of the natural world as the Egyptians knew it. Lining the temple base are carvings of papyrus and lotus plants that seem to grow from water, symbolized by figures of the Nile god Hapy. The two columns on the porch rise toward the sky like tall bundles of papyrus stalks with lotus blossoms bound with them. Above the gate and temple entrance are images of the sun disk flanked by the outspread wings of Horus, the sky god. The sky is also represented by the vultures, wings outspread, that appear on the ceiling of the entrance porch.\"\n      },\n      \"1399\": {\n        title: \"Wine Ewer with Chrysanthemums and Lotus Flowers\",\n        artist: \"Unknown\",\n        date: \"first half of the 13th century, Korea\",\n        medium: \"Stoneware with inlaid decoration under celadon glaze\",\n        location: \" On view at The Met Fifth Avenue in Gallery 204\",\n        url: \"https://collectionapi.metmuseum.org/api/collection/v1/iiif/50356/180977/main-image\",\n        descriptionText: \"The inlaid patterns that decorate this ewer were created by etching the motifs into a body, filling in the carved space with black and/or white slip, and then firing the entire vessel with a celadon glaze.\"\n      },\n      \"1599\": {\n        title: \"The Unicorn Rests in a Garden (from the Unicorn Tapestries)\",\n        artist: \"Unknown, Made in Paris, France (cartoon); Made in Southern Netherlands (woven)\",\n        date: \" 1495–1505\",\n        medium: \"Wool warp with wool, silk, silver, and gilt wefts\",\n        location: \" On view at The Met Cloisters in Gallery 17\",\n        url: \"https://collectionapi.metmuseum.org/api/collection/v1/iiif/467642/940931/main-image\",\n        descriptionText: \"The seven individual hangings known as 'The Unicorn Tapestries', are among the most beautiful and complex works of art from the late Middle Ages that survive. Luxuriously woven in fine wool and silk with silver and gilded threads, the tapestries vividly depict scenes associated with a hunt for the elusive, magical unicorn.\"\n      },\n      \"1799\": {\n        title: \"Young Woman with a Water Pitcher\",\n        artist: \"Johannes Vermeer (Dutch, Delft 1632–1675 Delft)\",\n        date: \"ca. 1662\",\n        medium: \"Oil on canvas\",\n        location: \"On view at The Met Fifth Avenue in Gallery 614\",\n        url: \"https://collectionapi.metmuseum.org/api/collection/v1/iiif/437881/1476893/main-image\",\n        descriptionText: \"Standing at an open window, a woman begins her day with ablutions from a gilt silver pitcher and basin, with linen coverings protecting her dress and hair. The first work by Vermeer to enter an American collection, this painting embodies the artist’s interest in domestic themes, giving an almost voyeuristic glimpse into the private life of a woman before she presents her public face to the world.\"\n      },\n      \"1899\": {\n        title: \"Self-Portrait with a Straw Hat (obverse: The Potato Peeler)\",\n        artist: \"Vincent van Gogh (Dutch, Zundert 1853–1890 Auvers-sur-Oise)\",\n        date: \"1887\",\n        medium: \"Oil on canvas\",\n        location: \"On view at The Met Fifth Avenue in Gallery 825\",\n        url: \"https://collectionapi.metmuseum.org/api/collection/v1/iiif/436532/1671316/main-image\",\n        descriptionText: \"Van Gogh produced more than twenty self-portraits during his Parisian sojourn (1886–88). Short of funds but determined nevertheless to hone his skills as a figure painter, he became his own best sitter: 'I purposely bought a good enough mirror to work from myself, for want of a model.' This picture, which shows the artist's awareness of Neo-Impressionist technique and color theory, is one of several that are painted on the reverse of an earlier peasant study.\"\n      },\n      \"2024\": {\n        title: \"Autumn Rhythm (Number 30)\",\n        artist: \"Jackson Pollock (American, Cody, Wyoming 1912–1956 East Hampton, New York)\",\n        date: \"1950\",\n        medium: \"Enamel on canvas\",\n        location: \"On view at The Met Fifth Avenue in Gallery 919\",\n        url: \"https://collectionapi.metmuseum.org/api/collection/v1/iiif/488978/1012539/restricted\",\n        descriptionText: \"The Met acquired this monumental 'drip' painting by Pollock in 1957, the year following the artist's unexpected death—a sign of how quickly his reinvention of painting was accepted into the canon of modern art. However revolutionary in technique, Pollock’s large-scale work was rooted in the muralism of the 1930s, including the art of Thomas Hart Benton (see America Today, MMA 2012.478a–j) and David Alfaro Siqueiros, both of whom he had worked alongside. Pollock proclaimed in 1947: 'I intend to paint large movable pictures which will function between the easel and the mural. . . . the tendency of modern feeling is towards the wall picture or mural.' This work's title suggests not only the month in which he painted it (October), but also an alignment with nature's constant flux.\"\n      }\n    };\n\n    // could use replaceChildren(children), or createElement() and append()\n\n    const newTitle = document.createElement(\"li\");\n    newTitle.innerText = SelectedWorkKey[this.dateEnd].title;\n    const br = document.createElement(\"br\");\n    const artist = document.createElement(\"p\");\n    artist.innerText = \"Artist: \" + SelectedWorkKey[this.dateEnd].artist;\n    const date = document.createElement(\"p\");\n    date.innerText = \"Date: \" + SelectedWorkKey[this.dateEnd].date;\n    const medium = document.createElement(\"p\");\n    medium.className = \"medium\";\n    medium.innerText = \"Medium: \" + SelectedWorkKey[this.dateEnd].medium;\n    const location = document.createElement(\"p\");\n    location.className = \"location\";\n    location.innerText = \"Met location: \" + SelectedWorkKey[this.dateEnd].location;\n    const image = document.createElement(\"img\");\n    image.id = \"selected-work-image\";\n    image.setAttribute(\"src\", SelectedWorkKey[this.dateEnd].url);\n    const description = document.createElement(\"p\");\n    description.className = \"description\";\n    description.innerText = \"Description: \" + SelectedWorkKey[this.dateEnd].descriptionText;\n    const parent = document.querySelector(\".works\");\n    parent.replaceChildren(newTitle, br, artist, date, medium, location, image, description);\n  }\n\n  // Helper Method to add each value from a field of an object to an array\n  addToArray(object, field) {\n    if (!object[field]) {\n      object[field] = 1;\n    } else {\n      object[field] += 1;\n    }\n    return object;\n  }\n\n  // Right now: gets the top 10ish artists who have works that are highlights in the collection, between the time period of the View\n  // NOTE - ON HIGHLIGHTS, since dataset is too large...\n  // Search by criteria\n  // returns an array of object IDs that match criteria, iterate through each object by id through another fetch & get at artist, collect that info into an array\n  getArtists() {\n    let artists = {};\n    let sum = 0;\n    fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?dateBegin=${this.dateBegin}&dateEnd=${this.dateEnd}&q=*`).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(response);\n      }\n    }).then(data => {\n      console.log(\"Success!\");\n      console.log(data);\n      let set = [...data[\"objectIDs\"]];\n      return set;\n    }, errorResponse => {\n      console.log(\"Failure!\");\n      console.log(errorResponse);\n    }).then(data => {\n      data.forEach((element, idx) => {\n        //if (idx < 10) {\n        fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${element}`).then(response => {\n          console.log(\"here\");\n          return response.json();\n        }).then(response => {\n          this.addToArray(artists, response.artistDisplayName);\n          if (idx === data.length - 1) {\n            console.log(artists, \"artists\");\n            Object.values(artists).forEach(ele => {\n              sum += ele;\n            });\n            console.log(sum, \"sum\");\n            let arr = Object.entries(artists).slice();\n            arr.sort((a, b) => b[1] - a[1]);\n            console.log(arr.slice(0, 14));\n          }\n        });\n        //}\n      });\n      return artists;\n    });\n  }\n\n  // Gets top 10ish years of works acquired (among the highlights)\n  // probably makes sense to refactor to show by different year buckets, for data that makes more sense to read/see\n  getYears() {\n    let years = {};\n    let sum = 0;\n    fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?isHighlight=true&dateBegin=${this.dateBegin}&dateEnd=${this.dateEnd}&q=*`).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(response);\n      }\n    }).then(data => {\n      console.log(\"Success!\");\n      console.log(data);\n      let set = [...data[\"objectIDs\"]];\n      return set;\n    }, errorResponse => {\n      console.log(\"Failure!\");\n      console.log(errorResponse);\n    }).then(data => {\n      data.forEach((element, idx) => {\n        //if (idx < 10) {\n        fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${element}`).then(response => {\n          console.log(\"here\");\n          return response.json();\n        }).then(response => {\n          this.addToArray(years, response.accessionYear);\n          if (idx === data.length - 1) {\n            console.log(years, \"years\");\n            Object.values(years).forEach(ele => {\n              sum += ele;\n            });\n            console.log(sum, \"sum\");\n            let arr = Object.entries(years).slice();\n            arr.sort((a, b) => b[1] - a[1]);\n            console.log(arr.slice(0, 14));\n          }\n        });\n        //}\n      });\n      return years;\n    });\n  }\n\n  // Gets the top 14 countries \n  // probably makes sense to refactor to show by different year buckets, for data that makes more sense to read/see\n  getCountry() {\n    let countries = {};\n    let sum = 0;\n    fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?isHighlight=true&dateBegin=${this.dateBegin}&dateEnd=${this.dateEnd}&q=*`).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(response);\n      }\n    }).then(data => {\n      console.log(\"Success!\");\n      console.log(data);\n      let set = [...data[\"objectIDs\"]];\n      return set;\n    }, errorResponse => {\n      console.log(\"Failure!\");\n      console.log(errorResponse);\n    }).then(data => {\n      data.forEach((element, idx) => {\n        //if (idx < 10) {\n        fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${element}`).then(response => {\n          console.log(\"here\");\n          return response.json();\n        }).then(response => {\n          this.addToArray(countries, response.country);\n          if (idx === data.length - 1) {\n            console.log(countries, \"countries\");\n            Object.values(countries).forEach(ele => {\n              sum += ele;\n            });\n            console.log(sum, \"sum\");\n            let arr = Object.entries(countries).slice();\n            arr.sort((a, b) => b[1] - a[1]);\n            console.log(arr.slice(0, 14));\n          }\n        });\n        //}\n      });\n      return countries;\n    });\n  }\n\n  // Gets the 14 departments distribution (among the highlights)\n  getDepartments() {\n    let departments = {};\n    let sum = 0;\n    fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?isHighlight=true&dateBegin=${this.dateBegin}&dateEnd=${this.dateEnd}&q=*`).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(response);\n      }\n    }).then(data => {\n      console.log(\"Success!\");\n      console.log(data);\n      let set = [...data[\"objectIDs\"]];\n      return set;\n    }, errorResponse => {\n      console.log(\"Failure!\");\n      console.log(errorResponse);\n    }).then(data => {\n      data.forEach((element, idx) => {\n        //if (idx < 10) {\n        fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${element}`).then(response => {\n          console.log(\"here\");\n          return response.json();\n        }).then(response => {\n          this.addToArray(departments, response.department);\n          if (idx === data.length - 1) {\n            console.log(departments, \"departments\");\n            Object.values(departments).forEach(ele => {\n              sum += ele;\n            });\n            console.log(sum, \"sum\");\n            let arr = Object.entries(departments).slice();\n            arr.sort((a, b) => b[1] - a[1]);\n            console.log(arr.slice(0, 14));\n          }\n        });\n        //}\n      });\n      return departments;\n    });\n  }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (View);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/view.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qc19wcm9qZWN0Ly4vc3JjL2luZGV4LnNjc3M/OTc0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;