/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/view */ \"./src/scripts/view.js\");\n/* harmony import */ var _scripts_horizBarChartVisual__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/horizBarChartVisual */ \"./src/scripts/horizBarChartVisual.js\");\n/* harmony import */ var _scripts_horizBarChartVisual__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_scripts_horizBarChartVisual__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _scripts_pieDataVisual__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scripts/pieDataVisual */ \"./src/scripts/pieDataVisual.js\");\n/* harmony import */ var _scripts_pieDataVisual__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_scripts_pieDataVisual__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nconsole.log(\"Webpack is working!\");\n\n// Code for dialog\nconst dialog = document.querySelector(\"dialog\");\nconst closeButton = document.querySelector(\"dialog button\");\n\n// \"Close\" button closes the dialog\ncloseButton.addEventListener(\"click\", () => {\n  dialog.close();\n});\n\n// eventlistener for click on Time Period buttons\nconst buttons = document.querySelector('.time-periods');\nconsole.log(buttons);\nlet timeStart;\nlet timeEnd;\nbuttons.addEventListener('click', event => {\n  console.log(event.target);\n  if (event.target.nodeName === \"LI\") {\n    console.log(event.target.innerText);\n    // console.log(event.target.getAttribute(\"data-time-start\"));\n    // console.log(event.target.getAttribute(\"data-time-end\"));\n    timeStart = event.target.getAttribute(\"data-time-start\");\n    timeEnd = event.target.getAttribute(\"data-time-end\");\n    let view1 = new _scripts_view__WEBPACK_IMPORTED_MODULE_0__[\"default\"](timeStart, timeEnd);\n    let num = view1.numHighlights();\n  }\n});\n\n// let view2 = new View(\"1800\", \"1900\");\n// let num = view2.getArtists();\n\n// view1.getCountry();\n// view1.getDepartments();\n// view1.getYears();\n// console.log(num, \"num is\");\n// view1.getArtists();\n\n// TEST CODE --------------------------------------\n// test webpack working, manipulate html element\n// document.querySelectorAll(\"ul.works > li\").forEach( element => {\n//     element.style.color = \"red\";\n// });\n\n// testing The Met API link up\n\n// GET /public/collection/v1/objects : returns a listing of all valid Object IDs available to use\n// 487401 objects\n// public/collection/v1/objects/437133 : returns a specific object at the object id (ex. 437133, \"Garden at Sainte-Adresse\" by Claude Monet) \n\n// Search by criteria\n// returns an array of object IDs that match criteria\n// could use object ID to get at fields, and then iterate through each object, collect that info from each object\n// fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?isHighlight=true&dateBegin=1800&dateEnd=1899&q=*`)\n//   .then(response => {\n//     if (response.ok) {\n//       return response.json();\n//     } else {\n//       throw new Error(response);\n//     }\n//   })\n//   .then(\n//     data => {\n//       console.log(\"Success!\");\n//       console.log(data);\n//     },\n//     errorResponse => {\n//       console.log(\"Failure!\");\n//       console.log(errorResponse);\n//     }\n//   );\n\n// Need to work on:\n// Search option, search by category\n// search by (title, artist, year,Â material, tag)\n\n// PIE CHART CODE \n// set the dimensions and margins of the graph\n// const width = 300,\n//     height = 300,\n//     margin = 40;\n\n// // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n// const radius = Math.min(width, height) / 2 - margin;\n\n// // append the svg object to the div called 'my_dataviz'\n// const svg = d3.select(\"#my_dataviz\")\n//   .append(\"svg\")\n//     .attr(\"width\", width)\n//     .attr(\"height\", height)\n//   .append(\"g\")\n//     .attr(\"transform\", `translate(${width/2}, ${height/2})`);\n\n// // Create dummy data\n// const data = {a: .33, b:.67}\n\n// // set the color scale\n// const color = d3.scaleOrdinal()\n//   .range([\"#BF2720\", \"#BFBFBF\"])\n\n// // Compute the position of each group on the pie:\n// const pie = d3.pie()\n//   .value(function(d) {return d[1]})\n//   // d is an array of the data values [[a, .33],[b, .67]]\n// const data_set = pie(Object.entries(data))\n\n// // div that appends to the body, but isn't visible\n// var div = d3.select(\"body\").append(\"div\")\n//      .attr(\"class\", \"tooltip-donut\")\n//      .style(\"opacity\", 0);\n\n// // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n// svg\n//   .selectAll('All')\n//   .data(data_set)\n//   .join('path')\n//   .attr('d', d3.arc()\n//     .innerRadius(0)\n//     .outerRadius(radius)\n//   )\n//   .attr('fill', function(d){ return(color(d.data[1])) })\n//   .attr(\"stroke\", \"white\")\n//   .style(\"stroke-width\", \"1px\")\n//   .style(\"opacity\", 0.7)\n//   .on('mouseover', function (d, i) {\n//     d3.select(this).transition()\n//          .duration('50')\n//          .attr('opacity', '.85');\n\n//          //Makes the new div appear on hover:\n//          div.transition()\n//                .duration(50)\n//                .style(\"opacity\", 1);\n//               let num = (Math.round((d.value / d.data.all) * 100)).toString() + '%';\n//           div.html(num)\n//                .style(\"left\", (d3.event.pageX + 10) + \"px\")\n//                .style(\"top\", (d3.event.pageY - 15) + \"px\");\n//      })\n//   .on('mouseout', function (d, i) {\n//       d3.select(this).transition()\n//           .duration('50')\n//           .attr('opacity', '1');\n\n//           //Makes the new div disappear:\n//           div.transition()\n//                .duration('50')\n//                .style(\"opacity\", 0);\n//      });\n\n// // Set up the dimensions of the chart\n// const margin = { top: 70, right: 40, bottom: 60, left: 175 }\n// const width = 660 - margin.left - margin.right\n// const height = 400 - margin.top - margin.bottom\n\n// // Create the SVG container for the chart\n// const svg = d3.select(\"#example-chart\").append(\"svg\")\n//   .attr(\"width\", width + margin.left + margin.right)\n//   .attr(\"height\", height + margin.top + margin.bottom)\n//   .append(\"g\")\n//   .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n// // Load and process the data\n// // d3.csv(\"bog_bodies.csv\").then(data => {\n// //   data.forEach(d => {\n// //     d.total = +d.total;\n// //   });\n\n//   const data = [{\"\":\"1\", type: \"a\", total:\"10\"},\n//                 {\"\":\"2\", type: \"b\", total:\"15\"},\n//                 {\"\":\"3\", type: \"c\", total:\"20\"},\n//                 {\"\":\"4\", type: \"d\", total:\"6\"},\n//                 {\"\":\"5\", type: \"e\", total:\"13\"},\n//                 {\"\":\"6\", type: \"f\", total:\"70\"},\n//                 {\"\":\"7\", type: \"g\", total:\"5\"}\n//   ]\n\n//   // Sort the data by total\n//   data.sort(function (a, b) {\n//     return d3.ascending(a.total, b.total);\n//   });\n\n//   // Set the x and y scales\n//   const x = d3.scaleLinear()\n//     .range([0, width])\n//     .domain([0, d3.max(data, function (d) { return d.total; })]);\n\n//   const y = d3.scaleBand()\n//     .range([height, 0])\n//     .padding(0.1)\n//     .domain(data.map(function (d) { return d.type; }));\n\n//   // Create the x and y axes\n//   const xAxis = d3.axisBottom(x)\n//     .ticks(5)\n//     .tickSize(0); // remove ticks\n\n//   const yAxis = d3.axisLeft(y)\n//     .tickSize(0)\n//     .tickPadding(10);\n\n//   // Add vertical gridlines\n//   svg.selectAll(\"line.vertical-grid\")\n//     .data(x.ticks(5))\n//     .enter()\n//     .append(\"line\")\n//     .attr(\"class\", \"vertical-grid\")\n//     .attr(\"x1\", function (d) { return x(d); })\n//     .attr(\"y1\", 0)\n//     .attr(\"x2\", function (d) { return x(d); })\n//     .attr(\"y2\", height)\n//     .style(\"stroke\", \"gray\")\n//     .style(\"stroke-width\", 0.5)\n//     .style(\"stroke-dasharray\", \"3 3\");\n\n//   // Create the bars for the chart\n//   svg.selectAll(\".bar\")\n//     .data(data)\n//     .enter().append(\"rect\")\n//     .attr(\"class\", \"bar\")\n//     .attr(\"y\", function (d) { return y(d.type); })\n//     .attr(\"height\", y.bandwidth())\n//     .attr(\"x\", 0)\n//     .attr(\"width\", function (d) { return x(d.total); })\n//     .attr('fill', '#BF2720')\n\n//   // Add the x and y axes to the chart\n//   svg.append(\"g\")\n//     .attr(\"class\", \"x axis\")\n//     .style(\"font-size\", \"10px\")\n//     .attr(\"transform\", \"translate(0,\" + height + \")\")\n//     .call(xAxis)\n//     .call(g => g.select(\".domain\").remove());\n\n//   svg.append(\"g\")\n//     .attr(\"class\", \"y axis\")\n//     .style(\"font-size\", \"8px\")\n//     .call(yAxis)\n//     .selectAll('path')\n//     .style('stroke-width', '1.75px');\n\n//   svg.selectAll(\".y.axis .tick text\")\n//     .text(function (d) {\n//       return d.toUpperCase();\n//     });\n\n//   //});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/horizBarChartVisual.js":
/*!********************************************!*\
  !*** ./src/scripts/horizBarChartVisual.js ***!
  \********************************************/
/***/ (function() {

eval("// Set up the dimensions of the chart\nconst margin = {\n  top: 0,\n  right: 50,\n  bottom: 50,\n  left: 50\n};\nconst width = 325 - margin.left - margin.right;\nconst height = 275 - margin.top - margin.bottom;\n\n// Create the SVG container for the chart\nconst svg = d3.select(\"#example-chart\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\") // g is group element\n.attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n// Load and process the data\n// d3.csv(\"fileName.csv\").then(data => {\n//   data.forEach(d => {\n//     d.total = +d.total; // taking every total value and make it a number\n//   });\n\n// div that appends to the body, but isn't visible\nvar divTip = d3.select(\"#horiz-chart-group\").append(\"div\").attr(\"class\", \"tooltip\").style(\"opacity\", 0);\nconst data = [{\n  \"\": \"1\",\n  type: \"a\",\n  total: \"10\"\n}, {\n  \"\": \"2\",\n  type: \"b\",\n  total: \"15\"\n}, {\n  \"\": \"3\",\n  type: \"c\",\n  total: \"20\"\n}, {\n  \"\": \"4\",\n  type: \"d\",\n  total: \"6\"\n}, {\n  \"\": \"5\",\n  type: \"e\",\n  total: \"13\"\n}, {\n  \"\": \"6\",\n  type: \"f\",\n  total: \"70\"\n}, {\n  \"\": \"7\",\n  type: \"g\",\n  total: \"5\"\n}];\n\n// Sort the data by total\ndata.sort(function (a, b) {\n  return d3.ascending(a.total, b.total);\n});\n\n// Set the x and y scales\nconst x = d3.scaleLinear().range([0, width]) // range of pixels where chart will live\n.domain([0, d3.max(data, function (d) {\n  return d.total;\n})]); // set of numbers will be from 0 to the biggest # in our dataset will look at all our totals and return the max\n\nconst y = d3.scaleBand() // use this with horiz bar chart\n.range([height, 0]).padding(0.1).domain(data.map(function (d) {\n  return d.type;\n})); // domain is all the y-values\n\n// Create the x and y axes\nconst xAxis = d3.axisBottom(x).ticks(5).tickSize(0); // remove ticks\n\nconst yAxis = d3.axisLeft(y).tickSize(0).tickPadding(10);\n\n// Add vertical gridlines\nsvg.selectAll(\"line.vertical-grid\").data(x.ticks(5)).enter().append(\"line\").attr(\"class\", \"vertical-grid\").attr(\"x1\", function (d) {\n  return x(d);\n}).attr(\"y1\", 0).attr(\"x2\", function (d) {\n  return x(d);\n}).attr(\"y2\", height).style(\"stroke\", \"gray\").style(\"stroke-width\", 0.5).style(\"stroke-dasharray\", \"3 3\");\n\n// Create the bars for the chart\nsvg.selectAll(\".bar\").data(data).enter().append(\"rect\").attr(\"class\", \"bar\").attr(\"id\", function (d) {\n  return d.total.toString();\n}).attr(\"y\", function (d) {\n  return y(d.type);\n}).attr(\"height\", y.bandwidth()).attr(\"x\", 0).attr(\"width\", function (d) {\n  return x(d.total);\n}).attr('fill', '#BF2720');\n\n// Add the x and y axes to the chart\nsvg.append(\"g\").attr(\"class\", \"x axis\").style(\"font-size\", \"10px\").attr(\"transform\", \"translate(0,\" + height + \")\") // this moves it from the top of the chart to the bottom\n.call(xAxis).call(g => g.select(\".domain\").remove());\nsvg.append(\"g\").attr(\"class\", \"y axis\").style(\"font-size\", \"8px\").call(yAxis).selectAll('path').style('stroke-width', '1.75px');\nsvg.selectAll(\".y.axis .tick text\").text(function (d) {\n  return d.toUpperCase();\n});\nsvg.on(\"mouseover\", evt => {\n  // console.log(evt.target, \"evt.target\");\n  d3.select(evt.target).transition().duration('50').attr('opacity', '.85');\n\n  //Makes the new div appear on hover:\n  divTip.transition().duration(50).style(\"opacity\", 1);\n  let num = `${evt.target.id} works`;\n  divTip.html(num).style(\"left\", evt.pageX - 25 + \"px\").style(\"top\", evt.pageY - 10 + \"px\");\n}).on('mouseout', function (evt, d) {\n  d3.select(evt.target).transition().duration('50').attr('opacity', '1');\n\n  //Makes the new divTip disappear:\n  divTip.transition().duration('50').style(\"opacity\", 0);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/horizBarChartVisual.js\n");

/***/ }),

/***/ "./src/scripts/pieDataVisual.js":
/*!**************************************!*\
  !*** ./src/scripts/pieDataVisual.js ***!
  \**************************************/
/***/ (function() {

eval("// PIE CHART CODE \n// set the dimensions and margins of the graph\nconst width = 250,\n  height = 250,\n  margin = 0;\n\n// The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\nconst radius = Math.min(width, height) / 2 - margin;\n\n// append the svg object to the div called 'piechart_viz'\nconst svg = d3.select(\"#piechart_viz\").append(\"svg\").attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// Create dummy data\nconst data = [{\n  title: \"Highlight\",\n  value: 33\n}, {\n  title: \"Not Highlight\",\n  value: 67\n}];\n\n// set the color scale\nconst color = d3.scaleOrdinal().range([\"#BF2720\", \"#BFBFBF\"]);\n\n// Compute the position of each group on the pie:\nconst pie = d3.pie().value(function (d) {\n  return d.value;\n})(data);\n// d is an array of the data values [[a, .33],[b, .67]]\n\n//  const data_set = pie(Object.entries(data))\n\n// div that appends to the body, but isn't visible\nvar divTip = d3.select(\"#pie-chart-group\").append(\"div\").attr(\"class\", \"tooltip\").style(\"opacity\", 0);\n\n// Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\nvar path = svg.selectAll('path').data(pie).enter().append('path')\n//.join('path')\n.attr('d', d3.arc().innerRadius(0).outerRadius(radius)).attr('fill', function (d) {\n  return color(d.data.title);\n}).attr(\"stroke\", \"white\").style(\"stroke-width\", \"1px\")\n//.attr('transform', 'translate(0, 0)')\n.on(\"mouseover\", (evt, d) => {\n  // console.log(evt.target, \"evt.target\");\n  //const [mx, my] = d3.pointer(evt); \n  d3.select(evt.target).transition().duration('50').attr('opacity', '.85');\n\n  //Makes the new div appear on hover:\n  divTip.transition().duration(50).style(\"opacity\", 1);\n  console.log(d, \"d is\");\n  let num = `${d.data.title}: ${d.value.toString()}%`;\n  divTip.html(num).style(\"left\", evt.pageX - 25 + \"px\").style(\"top\", evt.pageY - 10 + \"px\");\n}).on('mouseout', function (evt, d) {\n  d3.select(evt.target).transition().duration('50').attr('opacity', '1');\n\n  //Makes the new divTip disappear:\n  divTip.transition().duration('50').style(\"opacity\", 0);\n});\n\n// OLD\n//      d3.select(this).transition()\n//      .duration('50')\n//      .attr('opacity', '.85');\n\n//      //Makes the new div appear on hover:\n//      divTip.transition()\n//            .duration(50)\n//            .style(\"opacity\", 1);\n//            console.log(d, \"d is\");\n//           let num = (100).toString() + '%';\n//       divTip.html(num)\n//            .style(\"left\", (d3.event.pageX + 10) + \"px\")\n//            .style(\"top\", (d3.event.pageY - 15) + \"px\");\n//  })\n// .on('mouseout', function (d, i) {\n//   d3.select(this).transition()\n//       .duration('50')\n//       .attr('opacity', '1');\n\n//       //Makes the new divTip disappear:\n//       divTip.transition()\n//            .duration('50')\n//            .style(\"opacity\", 0);\n//  });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/pieDataVisual.js\n");

/***/ }),

/***/ "./src/scripts/view.js":
/*!*****************************!*\
  !*** ./src/scripts/view.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nclass View {\n  // View for each time period:\n  // Show % highlights among total number of works \n  //  - pie chart for this with % highlights vs. non highlights (show specific numbers in hover description)\n\n  // Show top artists (artists with the most works)\n\n  // Show % of regions represented \n  // Show makeup of Years of Accession\n\n  // eventlistener for click\n\n  constructor(dateBegin, dateEnd) {\n    this.dateBegin = dateBegin;\n    this.dateEnd = dateEnd;\n  }\n\n  // setup() {\n  //     const buttons = document.querySelector('.time-periods');\n  //     console.log(buttons);\n  //     let timeStart;\n  //     let timeEnd;\n\n  //     buttons.addEventListener('click', event => {\n  //         console.log(event.target); \n  //         if (event.target.nodeName === \"LI\") {\n  //             console.log(event.target.innerText);\n  //             // console.log(event.target.getAttribute(\"data-time-start\"));\n  //             // console.log(event.target.getAttribute(\"data-time-end\"));\n  //             timeStart = event.target.getAttribute(\"data-time-start\");\n  //             timeEnd = event.target.getAttribute(\"data-time-end\");\n  //         }; \n  //     });\n  //     this.dateBegin = timeStart;\n  //     this.dateEnd = timeEnd;\n  // }\n\n  // Returns the number of highlights from time period\n  numHighlights() {\n    fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?isHighlight=true&dateBegin=${this.dateBegin}&dateEnd=${this.dateEnd}&q=*`).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(response);\n      }\n    }).then(data => {\n      console.log(\"Success!\");\n      console.log(data);\n      console.log(data[\"total\"], \"num\");\n      let num = data[\"total\"];\n      return num;\n    }, errorResponse => {\n      console.log(\"Failure!\");\n      console.log(errorResponse);\n    });\n  }\n\n  // Helper Method to add each value from a field of an object to an array\n  addToArray(object, field) {\n    if (!object[field]) {\n      object[field] = 1;\n    } else {\n      object[field] += 1;\n    }\n    return object;\n  }\n\n  // Right now: gets the top 10ish artists who have works that are highlights in the collection, between the time period of the View\n  // NOTE - ON HIGHLIGHTS, since dataset is too large...\n  // Search by criteria\n  // returns an array of object IDs that match criteria, iterate through each object by id through another fetch & get at artist, collect that info into an array\n  getArtists() {\n    let artists = {};\n    let sum = 0;\n    fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?isHighlight=true&dateBegin=${this.dateBegin}&dateEnd=${this.dateEnd}&q=*`).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(response);\n      }\n    }).then(data => {\n      console.log(\"Success!\");\n      console.log(data);\n      let set = [...data[\"objectIDs\"]];\n      return set;\n    }, errorResponse => {\n      console.log(\"Failure!\");\n      console.log(errorResponse);\n    }).then(data => {\n      data.forEach((element, idx) => {\n        //if (idx < 10) {\n        fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${element}`).then(response => {\n          console.log(\"here\");\n          return response.json();\n        }).then(response => {\n          // console.log(\"here2\");\n          // console.log(response, idx);\n          // console.log(response.artistDisplayName);\n          this.addToArray(artists, response.artistDisplayName);\n          if (idx === data.length - 1) {\n            console.log(artists, \"artists\");\n            Object.values(artists).forEach(ele => {\n              sum += ele;\n            });\n            console.log(sum, \"sum\");\n            let arr = Object.entries(artists).slice();\n            arr.sort((a, b) => b[1] - a[1]);\n            console.log(arr.slice(0, 14));\n          }\n        });\n        //}\n      });\n      return artists;\n    });\n  }\n\n  // Gets top 10ish years of works acquired (among the highlights)\n  // probably makes sense to refactor to show by different year buckets, for data that makes more sense to read/see\n  getYears() {\n    let years = {};\n    let sum = 0;\n    fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?isHighlight=true&dateBegin=${this.dateBegin}&dateEnd=${this.dateEnd}&q=*`).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(response);\n      }\n    }).then(data => {\n      console.log(\"Success!\");\n      console.log(data);\n      let set = [...data[\"objectIDs\"]];\n      return set;\n    }, errorResponse => {\n      console.log(\"Failure!\");\n      console.log(errorResponse);\n    }).then(data => {\n      data.forEach((element, idx) => {\n        //if (idx < 10) {\n        fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${element}`).then(response => {\n          console.log(\"here\");\n          return response.json();\n        }).then(response => {\n          this.addToArray(years, response.accessionYear);\n          if (idx === data.length - 1) {\n            console.log(years, \"years\");\n            Object.values(years).forEach(ele => {\n              sum += ele;\n            });\n            console.log(sum, \"sum\");\n            let arr = Object.entries(years).slice();\n            arr.sort((a, b) => b[1] - a[1]);\n            console.log(arr.slice(0, 14));\n          }\n        });\n        //}\n      });\n      return years;\n    });\n  }\n\n  // Gets the top 14 countries \n  // probably makes sense to refactor to show by different year buckets, for data that makes more sense to read/see\n  getCountry() {\n    let countries = {};\n    let sum = 0;\n    fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?isHighlight=true&dateBegin=${this.dateBegin}&dateEnd=${this.dateEnd}&q=*`).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(response);\n      }\n    }).then(data => {\n      console.log(\"Success!\");\n      console.log(data);\n      let set = [...data[\"objectIDs\"]];\n      return set;\n    }, errorResponse => {\n      console.log(\"Failure!\");\n      console.log(errorResponse);\n    }).then(data => {\n      data.forEach((element, idx) => {\n        //if (idx < 10) {\n        fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${element}`).then(response => {\n          console.log(\"here\");\n          return response.json();\n        }).then(response => {\n          this.addToArray(countries, response.country);\n          if (idx === data.length - 1) {\n            console.log(countries, \"countries\");\n            Object.values(countries).forEach(ele => {\n              sum += ele;\n            });\n            console.log(sum, \"sum\");\n            let arr = Object.entries(countries).slice();\n            arr.sort((a, b) => b[1] - a[1]);\n            console.log(arr.slice(0, 14));\n          }\n        });\n        //}\n      });\n      return countries;\n    });\n  }\n\n  // Gets the 14 departments distribution (among the highlights)\n  getDepartments() {\n    let departments = {};\n    let sum = 0;\n    fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?isHighlight=true&dateBegin=${this.dateBegin}&dateEnd=${this.dateEnd}&q=*`).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(response);\n      }\n    }).then(data => {\n      console.log(\"Success!\");\n      console.log(data);\n      let set = [...data[\"objectIDs\"]];\n      return set;\n    }, errorResponse => {\n      console.log(\"Failure!\");\n      console.log(errorResponse);\n    }).then(data => {\n      data.forEach((element, idx) => {\n        //if (idx < 10) {\n        fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${element}`).then(response => {\n          console.log(\"here\");\n          return response.json();\n        }).then(response => {\n          this.addToArray(departments, response.department);\n          if (idx === data.length - 1) {\n            console.log(departments, \"departments\");\n            Object.values(departments).forEach(ele => {\n              sum += ele;\n            });\n            console.log(sum, \"sum\");\n            let arr = Object.entries(departments).slice();\n            arr.sort((a, b) => b[1] - a[1]);\n            console.log(arr.slice(0, 14));\n          }\n        });\n        //}\n      });\n      return departments;\n    });\n  }\n}\n\n// -----------------------------------------\n\n// dataset = fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?isHighlight=true&dateBegin=${dateBegin}&dateEnd=${dateEnd}&q=*`)\n//   .then(response => {\n//     if (response.ok) {\n//       return response.json();\n//     } else {\n//       throw new Error(response);\n//     }\n//   })\n//   .then(\n//     data => {\n//       console.log(\"Success!\");\n//       console.log(data);\n//     //   console.log(data[\"objectIDs\"]);\n//       set = [...data[\"objectIDs\"]];\n//       console.log(\"this is dataset\");\n//       console.log(set, \"hello\");\n//       return collectData(set);\n//     },\n//     errorResponse => {\n//       console.log(\"Failure!\");\n//       console.log(errorResponse);\n//     }\n//   );\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (View);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/view.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qc19wcm9qZWN0Ly4vc3JjL2luZGV4LnNjc3M/OTc0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;